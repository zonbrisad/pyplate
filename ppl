#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# --------------------------------------------------------------------------
#
# Python generator generator
#
# File:    ctemplate.py
# Author:  Peter Malmberg <peter.malmberg@gmail.com>
# Date:    2016-02-19
# Version: 0.3
# Python:  >=3
# License: MIT
#
# ---------------------------------------------------------------------------

# History -------------------------------------------------------------------
# - Ver 0.3
# Major rewrite for better code generation
#

# Todo ----------------------------------------------------------------------
#

# Imports -------------------------------------------------------------------

from __future__ import annotations

import argparse
import json
import logging
import os
import sys
import traceback
from dataclasses import dataclass
from typing import List

try:
    from git.repo import Repo
except ModuleNotFoundError:
    print("\nYou need library 'python3-git' to run this program.")
    print("\nTo install:")
    print(">sudo apt install python3-git\n")
    exit(0)


from bashplates import Bp
from pytemplates import (PyConf, PyGenerator, PyTemplate, t_application,
                         t_argtable, t_gtk, t_header, t_init, t_logging,
                         t_main, t_main_application, t_micro_python,
                         t_preamble, t_qt5)
from query import Query

# Settings ------------------------------------------------------------------

# Absolute path to script itself
self_dir = os.path.abspath(os.path.dirname(__file__))


class App:
    NAME = "ppltemplate"
    VERSION = "0.51"
    DESCRIPTION = "ppltemplate "
    LICENSE = ""
    AUTHOR = "Peter Malmberg"
    EMAIL = "peter.malmberg@gmail.com"
    ORG = ""
    HOME = "github.com/zonbrisad/mpterm"
    ICON = f"{self_dir}/icons/mp_icon2.png"


template_dir = f"{self_dir}/pyplate"
# readme_md = f"{template_dir}/README.md"

# Code ----------------------------------------------------------------------


@dataclass
class ProjectGenerator:
    create_subdir: bool = True
    create_git: bool = True
    create_gitignore: bool = True
    create_readme: bool = True
    create_history: bool = True
    project_name: str = ""
    project_dir: str = ""
    subdir_name: str = ""

    def query_attr(self):
        self.project_dir = os.getcwd()
        self.project_name = Query.read_string("Project name?", self.project_name)
        self.create_subdir = Query.read_bool("Create subdirectory?",
                                             default=self.create_subdir)
        if (self.create_subdir):
            self.subdir_name = Query.read_string("Name of subdirectory?",
                                                 default=self.project_name)

        self.create_git = Query.read_bool("Initiate git repository?",
                                          default=self.create_git)

        if (self.create_git):
            self.create_gitignore = Query.read_bool("Create .gitignore?",
                                                    default=self.create_gitignore)
            self.create_readme = Query.read_bool("Create README.md?",
                                                 default=self.create_readme)
            self.create_history = Query.read_bool("Create HISTORY.md?",
                                                  default=self.create_history)

    def git_add(self, file: str) -> None:
        if self.create_git:
            self.repo.index.add(file)

    def create(self):
        if self.create_subdir:
            self.project_dir = f"{self.project_dir}/{self.subdir_name}"
            if not Bp.mkdir(self.project_dir):
                exit()

        f_readme = f"{self.project_dir}/README.md"
        f_history = f"{self.project_dir}/HISTORY.md"
        f_gitignore = f"{self.project_dir}/.gitignore"

        if self.create_git:
            self.repo = Repo.init(self.project_dir)

            if self.create_readme:
                Bp.cp(f"{template_dir}/README.md", f_readme)
                self.git_add(f_readme)

            if self.create_history:
                Bp.cp(f"{template_dir}/HISTORY.md", f_history)
                self.git_add(f_history)

            if self.create_gitignore:
                Bp.cp(f"{template_dir}/gitignore", f_gitignore)
                self.git_add(f_gitignore)

    def commit(self):
        if self.create_git:
            self.repo.index.commit("Initial commit")


def create_project(generator: PyGenerator):

    if Query.read_bool("Do you want to create a project?", False):
        proj = ProjectGenerator()
        proj.project_name = generator.conf.name
        proj.query_attr()
        proj.create()
        proj.git_add(generator.write(proj.project_dir))
        proj.commit()
        return True

    return False


def create_file(args, templates: List[PyTemplate]) -> None:

    conf = PyConf(out_dir=args.dir)
    conf.query(args)

    # if external header, read into var
    if args.header is not None:
        # self.header = PyTemplate()
        with args.header as file:
            t_header.header_text = file.read()

    generator = PyGenerator(conf, templates)
    generator.generate()

    if args.dryrun:
        print(generator)
        if Query.read_bool("Save to file", False) is False:
            return

    if not create_project(generator):
        generator.write()


def cmd_new(args) -> None:
    create_file(args, [t_preamble, t_header, t_main])


def cmd_newa(args):
    create_file(args, [t_preamble, t_header, t_main_application, t_application, t_logging, t_argtable])


def cmd_newqt(args):
    create_file(args, [t_preamble, t_header, t_main_application, t_application, t_logging, t_argtable, t_qt5])


def cmd_newgtk(args):
    create_file(args, [t_preamble, t_header, t_application, t_gtk])


def cmd_newmp(args):
    create_file(args, [t_header, t_micro_python])


def cmd_newp(args):
    proj = ProjectGenerator()
    proj.query_attr()
    proj.create()
    proj.commit()


def cmd_newpkg(args):
    pkg_name = Query.read_string("Package name?")
    Bp.mkdir(pkg_name)

    conf = PyConf(out_dir=pkg_name)
    conf.name = "__init__.py"
    conf.query_name = False
    conf.query_description = False
    conf.query_author = False
    conf.query_email = False
    conf.query(args)
    generator = PyGenerator(conf, [t_init])
    generator.generate()
    generator.write()
    

# def cmd_newclass(args):
#     conf = PyConf()
#     # create_file(args, [t_preamble, t_header, t_application, t_gtk])
#     #conf.name = "__init__.py"
#     # conf.query_name = False
#     #conf.query_description = False
#     #conf.query_author = False
#     #conf.query_email = False
#     conf.query(args)
#     generator = PyGenerator(conf, [t_class])
#     generator.generate()
#     print(generator)
#     #generator.write()


class Settings:
    SETTINGS_DIR = "~/.config/pyplate"
    SETTINGS_FILE = "pyplate.json"

    def __init__(self) -> None:
        try:
            with open("pyplate/pyplate.json") as f:
                data = json.load(f)
        except FileNotFoundError:
            logging.error("Settings file 'pyplate/pyplate.json' not found.")
            data = {}

        print(data)

    def create(self) -> None:
        # Create personal settings
        pass


def main() -> None:
    logging_format = "[%(levelname)s] %(lineno)d %(funcName)s() : %(message)s"
    logging.basicConfig(format=logging_format)

    parent_parser = argparse.ArgumentParser(add_help=False)
    parent_parser.add_argument("--name",
                                type=str,
                                help="Name of Python module"
                                )
    parent_parser.add_argument("--description",
                                type=str,
                                help="Brief description",
                                metavar="DESC",
                                )
    parent_parser.add_argument("--author",
                                type=str,
                                help="Name of author",                     
                                )
    parent_parser.add_argument("--email",
                                type=str,
                                help="Email of author"
                                )
    parent_parser.add_argument("--project",
                                type=str,
                                help="Name of project",
                                metavar="NAME",
                                )
    # parent_parser.add_argument("--license",
    #                             type=str,
    #                             help="License of new file",
    #                             default=conf.license)

    parent_parser.add_argument("--main",
                                action="store_true",
                                help="Add main function block",
                                default=False)
    parent_parser.add_argument("--header",
                                type=argparse.FileType("r"),
                                help="Include external header",
                                metavar="FILE",
                                )
    parent_parser.add_argument("--dir",
                                type=str,
                                help="Project source directory",
                                default=".",
                                metavar="DIR",
                                )
    
    parent_parser.add_argument("--basedir",
                                type=str,
                                help="Project directory",
                                default=".",
                                metavar="DIR",
                                )
    parent_parser.add_argument("--write",
                                action="store_true",
                                help="Write file to disk",
                                default=False)
    parent_parser.add_argument("--printheader",
                                action="store_true",
                                help="Print default header to stdout",
                                default=False)
    parent_parser.add_argument("--separators",
                                action="store_true",
                                help="Add code separators",
                                default=False)
#    parent_parser.add_argument("--outfile",
#                                type=argparse.FileType("w",0),
#                                help="Write generator to file")
    parent_parser.add_argument("--debug",
                                action="store_true",
                                help="Print debug information")
    parent_parser.add_argument("--version",
                                action="version",
                                help="Print application version",
                                version=App.VERSION)
    parent_parser.add_argument(
        "--dryrun",
        action="store_true",
        help="Do not write to file and print to stdout",
        default=False,
    )

    parser = argparse.ArgumentParser(
            prog=App.NAME,
            description="Python code generator",
            epilog="Pyplate <https://github.com/zonbrisad/pyplate.git>",
            parents=[parent_parser],
        )          

    subparsers = parser.add_subparsers(title="Commands",
                                       help="",
                                       description="")

    subparsers.add_parser("new", parents=[parent_parser],
                          help="Create a new python file").set_defaults(func=cmd_new)
    subparsers.add_parser("newa", parents=[parent_parser],
                          help="Create a new application").set_defaults(func=cmd_newa)
    subparsers.add_parser("newqt", parents=[parent_parser],
                          help="Create a new QT5 application").set_defaults(func=cmd_newqt)
    subparsers.add_parser("newmp", parents=[parent_parser],
                          help="Create a new micro python application").set_defaults(func=cmd_newmp)
    subparsers.add_parser("newp", parents=[parent_parser],
                          help="Create python project").set_defaults(func=cmd_newp)
    subparsers.add_parser("newpkg", parents=[parent_parser],
                          help="Create __init__.py package file").set_defaults(func=cmd_newpkg)
    # subparsers.add_parser("newc", parents=[parrent_parser],
    #                       help="Create a new python class file").set_defaults(func=cmd_newclass)
    # parser_new = subparsers.add_parser("newgtk", parents=[parrent_parser],
    #                                    help="Create a new GTK3+ application")
    # parser_new.set_defaults(func=cmd_newgtk)

    args = parser.parse_args()

    if args.debug:
        logging.basicConfig(level=logging.DEBUG,
                            format=logging_format)
        logging.debug("Debug mode enabled")

    if hasattr(args, "func"):
        args.func(args)
        exit(0)

    if args.printheader:
        print(t_header.header_text)
        exit(0)

    parser.print_help()


if __name__ == "__main__":
    try:
        main()
        sys.exit(0)
    except KeyboardInterrupt as e:  # Ctrl-C
        raise e
    except SystemExit as e:        # sys.exit()
        raise e
    except Exception as e:
        logging.error('UNEXPECTED EXCEPTION')
        logging.error(str(e))
        traceback.print_exc()
        os._exit(1)
   
