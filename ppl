#!/usr/bin/env bash
# shellcheck disable=2034
# shellcheck disable=1090
#---------------------------------------------------------------------
#
#  [Description]
#    Pyplate help tool. This file is not part of the template itself
#    and shoud be erased when creating a new project based on this
#    template.
#
#  [Author]
#    Peter Malmberg <peter.malmberg@gmail.com>
#
#  [License]
#     MIT
#
#---------------------------------------------------------------------
# [Bashplates]
# This script is generated from bashplates template generator.
#
# Bashplates is developed by:
# Peter Malmberg <peter.malmberg@gmail.com>
#
# Bashplates is available at:
# https://github.com/zonbrisad/bashplates
#---------------------------------------------------------------------
#

# Display commands as they are executed
#set -o xtrace
# Display shell input lines as they are read
#set -v

# Exit script when a command fails. Append ||true if error is expected
#set -o errexit # || true
# Exit script when undeclared variable is used
#set -o nounset
# Exit script when pipe fails
set -o pipefail

#---------------------------------------------------------------------
# User defined Settings
#---------------------------------------------------------------------
bpUserSettings() {
  
# Settings directory
MP_CONFIG_DIR=~/.config/pyplate

# Directory for 3d party files
#MP_3DPARTY_DIR=${scriptPath}/3dparty
}
#---------------------------------------------------------------------
# User defined functions
#---------------------------------------------------------------------

##- Create

createProject() {
  echo -e ${1}
  
  pn=$(bpRead "Project name")
  desc=$(bpRead "Enter script description")
  author=$(bpRead "Project author" "${BP_NAME} <${BP_EMAIL}>" )

  bpCp "${2}" ./${pn}.py
  
  bpReplace ./${pn}.py "__NAME__"    "${pn}"
  bpReplace ./${pn}.py "__DATE__"    "${BP_DATE}"
  bpReplace ./${pn}.py "__LICENSE__" "${BP_LICENSE}"
  bpReplace ./${pn}.py "__AUTHOR__"  "${author}"
  bpReplace ./${pn}.py "__DESC__"    "${desc}"
  bpReplace ./${pn}.py "__ORG__"     "${BP_ORG}"
  
}

##N- Pyplate


news() { ##D Create new simple python project
  createProject "Creating new simple python project" ${BP_SCRIPT_PATH}/pyplate-basic.py 
}

new() { ##D Create new cli python project with option parsing
  createProject "Creating new python project" ${BP_SCRIPT_PATH}/pyplate.py
}

newqt() { ##D Create new QT5 python project 
  createProject "Creating new Qt5 python project" ${BP_SCRIPT_PATH}/pyplate-qt5.py
}


##- Project management (git)

clean() { ##D Remove leftover files 
  bpCd "${BP_SCRIPT_PATH}"

  find . -name "*~"     -delete
  find . -name "*.orig" -delete

  # Remove untraced files
  git clean -df -e *.log
  bpCd -
}

commit() { ##D Commit project to repository
  bpCd "${BP_SCRIPT_PATH}"
  git commit -a
  #git push --tags -a
  bpCd - 
}

tag() { ##D Make a new tag
  bpCd "${BP_SCRIPT_PATH}"
  # List existing tags
  git tag

  # read tag name/description
  tag=$( bpRead "Tagname" "")
  desc=$( bpRead "Description" "")

  # Tag revision
  git tag -a "$tag" -m "$desc"
  bpCd - 
}

push() { ##D Push project to GITHUB
  bpCd "${BP_SCRIPT_PATH}"
  git push --progress
  bpCd - 
} 

pull() { ##D Pull project from GITHUB
  bpCd "${BP_SCRIPT_PATH}"
  git pull --progress
  bpCd - 
} 

#---------------------------------------------------------------------
# Bashplate settings
#---------------------------------------------------------------------
bpInitSettings() { 

##V Script version info
APP_VERSION="1.03"

##V Usage info
APP_USAGE="Usage: ${BP_SCRIPT_NAME} command [option]"

##V Description text
DESC="Help tool for pyplate project"

##V logfile (uncomment to use logfile)
APP_LOGFILE=${BP_SCRIPT_PATH}/${BP_SCRIPT_NAME}.log

##V Lock file (uncomment to use lock file feature )
APP_LOCK_FILE=/tmp/${BP_SCRIPT_NAME}.lock

##V Logging options (uncomment to activate logging parameters)
BP_LOG_OK=1
BP_LOG_INFO=1
BP_LOG_WARNING=1
BP_LOG_ERROR=1
BP_LOG_CRITICAL=1

##V Activate settings function (will create settings file when run)
BP_SETTINGS=1

}
#---------------------------------------------------------------------
# Bashplate Hooks
#---------------------------------------------------------------------

##V Default command (uncomment to use a default command )
DEFAULT_CMD_HOOK=help

##V Pre script hook, execute this function before every command
#PRE_SCRIPT_HOOK=

##V Post script hook, execute this function after every command
#POST_SCRIPT_HOOK=

##V Function to be executed before every other cmd except DEFAULT function
#PRE_CMD_HOOK=

##V Function to be executed after every other function except DEFAULT function
#POST_CMD_HOOK=

##V Function to be executed after information command
#POST_INFO_HOOK=

##V Function run before help command is executed
#PRE_HELP_HOOK=

##V Function run after help command is executed
#POST_HELP_HOOK=

#---------------------------------------------------------------------
# Signal traps
#---------------------------------------------------------------------

signalInt() {
  bpCleanUp
  exit "$BP_E_OK"
}

signalHup() {
  bpCleanUp
}

signalQuit() {
  echo "Quit"
  bpCleanUp
}

signalTerm() {
  echo "Term"
  bpCleanUp
}

signalErr() {
  echo
  echo
  bpError "Trace error Row: $2  Function: $1"
  echo
  bpCallStack
  bpExit 1
}

signalDbg() {
  echo "Debug Row: $2  Function: $1"
}

##C- IHELP Exit and cleanup

bpCallStack() { ##I Print out BASH call stack
  bpTextLine "Call stack"
  echo
  local frame=0
  while caller $frame | sed -r -e "s/[0-9]*/${BP_C_VALUE}&${E_END}/"   ; do
    ((frame++));
  done
  echo "$*"
  bpLine
}

bpCleanUp() { ##I Cleanup function
  rm -f "$APP_LOCK_FILE"    # remove Lock file
  echo -e "${E_SHOW}"     # Turn on cursor if turned of
}

#
# $1 exit code, if not given exit code is 0=SUCCESS
#
bpExit() { ##I Function for safely exiting script
  bpCleanUp

  # execute postscript hook if existing
  if [ -n "$POST_SCRIPT_HOOK" ]; then
     ${POST_SCRIPT_HOOK}
  fi

  # Check if argument is given
  if [ -z "$1" ]; then
    exit 0   # Success
  else
    exit "$1"
  fi

}

bpErrorExit() {  ##I Safely exit script with a error
  bpError "${1}"
  bpCleanUp
  exit 1
}

#---------------------------------------------------------------------
# Terminal codes
#---------------------------------------------------------------------

# ANSI foreground colors codes
#
E_BLACK=$'\e[0;30m'        # Black
E_RED=$'\e[0;31m'          # Red
E_GREEN=$'\e[0;32m'        # Green
E_YELLOW=$'\e[0;33m'       # Yellow
E_BLUE=$'\e[0;34m'         # Blue
E_MAGENTA=$'\e[0;35m'      # Magenta
E_CYAN=$'\e[0;36m'         # Cyan
E_GRAY=$'\e[0;37m'         # Gray
E_DARKGRAY=$'\e[1;30m'     # Dark Gray
E_BR_RED=$'\e[1;31m'       # Bright Red
E_BR_GREEN=$'\e[1;32m'     # Bright Green
E_BR_YELLOW=$'\e[1;33m'    # Bright Yellow
E_BR_BLUE=$'\e[1;34m'      # Bright Blue
E_BR_MAGENTA=$'\e[1;35m'   # Bright Magenta
E_BR_CYAN=$'\e[1;36m'      # Bright Cyan
E_WHITE=$'\e[1;37m'        # White

# ANSI background color codes
#
E_ON_BLACK=$'\e[40m'       # Black
E_ON_RED=$'\e[41m'         # Red
E_ON_GREEN=$'\e[42m'       # Green
E_ON_YELLOW=$'\e[43m'      # Yellow
E_ON_BLUE=$'\e[44m'        # Blue
E_ON_MAGENTA=$'\e[45m'     # Magenta
E_ON_CYAN=$'\e[46m'        # Cyan
E_ON_WHITE=$'\e[47m'       # White

# ANSI Text attributes
E_ATTR_BOLD=$'\e[1m'
E_ATTR_LOWI=$'\e[2m'
E_ATTR_UNDERLINE=$'\e[4m'
E_ATTR_BLINK=$'\e[5m'
E_ATTR_REVERSE=$'\e[7m'

# ANSI cursor operations
#
E_RETURN=$'\e[F'           # Move cursor to begining of line
E_UP=$'\e[A'               # Move cursor one line up
E_DOWN=$'\e[B'             # Move cursor one line down
E_FORWARD=$'\e[C'          # Move cursor forward
E_BACK=$'\e[D'             # Move cursor backward
E_HIDE=$'\e[?25l'          # Hide cursor
E_SHOW=$'\e[?25h'          # Show cursor

E_END=$'\e[m'              # Clear Attributes

# Default Bashplate colortheme
BP_C_OK=$E_BR_GREEN
BP_C_INFO=$E_BR_CYAN
BP_C_WARNING=$E_BR_YELLOW
BP_C_ERROR=$E_BR_RED
BP_C_CRITICAL=$E_ON_RED$E_WHITE
BP_C_LINE=$E_DARKGRAY
BP_C_LINE_TEXT=$E_YELLOW
BP_C_DESCRIPTION=$E_GREEN
BP_C_ID=$E_CYAN
BP_C_FILENAME=$E_BR_GREEN
BP_C_PATH=$E_GREEN

# Shellscript colorize colors
BP_C_RESERVED=$E_RED
BP_C_COMMENT=$E_CYAN
BP_C_STRING=$E_GREEN
BP_C_VAR=$E_BR_YELLOW

# Exit codes
#
BP_E_OK=0            # successful termination

#---------------------------------------------------------------------
# Bashplate internal functions
#---------------------------------------------------------------------

##C- IHELP Printing functions

# Print text with row
#
# arg1 text to be printed
# arg2 text color
# arg3 line color
# arg4 middle character
# arg5 line character
#
bpPrintLineC() { ##I Print text with adjusted line after with selectable colors
  len1="${#1}"
  len4="${#4}"

  echo -en "${2}${1}${4}${3}"
  l=$((BP_COLUMNS - len1 - len4  ))
  seq -s"${5}" "${l}"|tr -d '[:digit:]'
  echo -en ${E_END} 
}

# Print text with row
#
# arg1 text to be printed
# arg2 text color
# arg3 line color
#
bpTextLineC() { ##I Print text with adjusted line after with selectable colors
  bpPrintLineC "$1" "$2" "$3" " " "-"
}

bpTextLine_old() { ##I Print text with line after
  bpTextLineC "$1" "${BP_C_LINE_TEXT}" "${BP_C_LINE}"
}

bpTextLine() { ##I Print text with line after
#  echo "$1 ${#1}"
  if [ "${#1}" -eq 0 ]; then
	  bpPrintLineC "" "" "${BP_C_LINE}" "" "-"
	else
  	bpPrintLineC "$1" "${BP_C_LINE_TEXT}" "${BP_C_LINE}" " " "-"
	fi
}

# Print a divider row
#
bpLine() { ##I Print a line
  bpPrintLineC "" "${BP_C_LINE}" "${BP_C_LINE}" "" "-"
}

# Generic command/description printout function
# 
# $1 command color
# $2 description color
# $3 command text
# $4 desccription text
#
bpPrintInfoGeneric() {
  printf "${1}  %-24.24s${E_END} ${2}%s${E_END}\n" "$3" "$4"
}


# Print text into two columns
#
# arg1 text for column 1
# arg2 text for column 2
#
bpPrintInfo() {
  bpPrintInfoGeneric "${BP_C_ID}" "${BP_C_DESCRIPTION}" "$1" "$2"
}

bpPrintInfoAlt() {
  bpPrintInfoGeneric "${E_DARKGRAY}" "${BP_C_DESCRIPTION}" "$1" "$2"
}

# Print a variable + text into two columns
#
# $1 variable for column 1
# $2 text for column 2
# $3 optional text form column 1
#
bpPrintVar() {
  var="$1"      
  if [ "${!var}" ]; then
    if [ ! -z "$3" ]; then
      X=${3}
    else 
      X="${!var}"
    fi
    bpPrintInfo "$2" "${X}"
  else
    printf "${BP_C_ID}  %-24s${E_END} ${E_RED}N/A${E_END}\n" "$2"
  fi
}


#
# Colorize string containing filename
#
# $1 string with filename to colorize
# ret colorized string
#
bpColorizeFile() { ##I Colorize string containing filename
  if [ ! -z "$1" ]; then
    echo "${BP_C_PATH}$(dirname "$1")/${BP_C_FILENAME}$(basename "$1")${E_END}"
  fi
}


#
# Colorize string containing URL
#
# $1 string with url to colorize
# ret colorized string
#
# todo: give username own color
#
bpColorizeUrl() { ##I Colorize string containing url 
  url=$(echo -n $1 | sed -r -e "s/^.*\/\///")
  prot=$(echo -n $1 | sed -r -e "s/:\/.*//")
  #un=$( echo $url | sed -r -e 's/\(.*\)@/$1/')
  #echo "UN: ${un}"
  echo -e -n "${E_DARKGRAY}${prot}${E_END}://$(bpColorizeFile ${url})"
}

#
# $1 string to be filtered
#
bpFilterEscape() { ##I Filter escape characters from string
  echo "$1" | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g"
}
  

##C- IHELP File operations

#
# $1 command to execute
#
bpRun() { ##I Execute command
  if [ -e "$1" ]; then
    ${1}
		return 0
  else
    bpError "Could not execute $1, file does not exist!"
		return 1
  fi
}

#
# $1 directory to change to
#
bpCd() { ##I Safe cd function (exits on fail)
  cd "$1" || bpExit "Failed to cd to [$1]"
}

# Create a directory if it does not exist
#
# $1 Directory to be created
#
bpMkDir() { ##I Create directory
  if [ ! -d "$1" ]; then
    bpInfo "Creating directory \"${1}\""
    mkdir -p "$1"
  fi
}

#
# $1 
# $2
#
bpLn() { ##I Create symbolic link
  bpInfo "Creating link \"${2}\""
  if [ ! -L "$1" ]; then
    ln -s "${1}" "${2}"
  fi
}

# 
# Copy file(s)
# 
# $1 file(s) to be copied
# $2 destination
#
bpCp() { ##I Copy file(s)
  bpInfo "Copying \"${1}\" to \"${2}\""
  cp -rf "$@"
}

#
# Move file(s)
#
# $1 file(s) to be moved
# $2 destination
bpMv() { ##I Move file(s)
  bpInfo "Moving file \"${1}\" \"${2}\""
  mv "$1" "$2"
}

# 
# Remove file(s)
# 
# $1 file(s) to be removed
#
bpRm() { ##I Remove file
  bpInfo "Removing file \"${1}\""
  rm -rf "${1}"
}


# 
# Make backup of file
#
# $1 file to be backed up
#
bpBackup() { ##I Make backup of file
  BF="${1}_$(date +"%Y%m%d")-$(date +"%H%M%S").bak"
  bpInfo "Backing up file \"$1\" to \"${BF}\""
  cp -rf "$1" "${BF}" 
}

# Replace text in file
#
# $1 file 
# $2 text to replace
# $3 new text
#
bpReplace() {  ##I Replace text in file
  sed -i -e "s/${2}/${3}/g"  "$1"
}

# Replace entire line matching pattern
#
# $1 file 
# $2 pattern matching line
# $3 new text
#
bpReplaceLine() {  ##I Replace entire line in file
  sed -i -e "0,/${2}/s/${2}.*/${3}/" "${1}"
}

# Appends a line to a file if it is not present in that file.
#
# $1 file
# $2 line to append
#
bpAppendIfNoSuchLine() { ##I Append a line if it does not exist in file
  grep -q -F "$2" "$1" || echo "$2" >> "$1"
}

# Remove line in file containing a given string
#
# $1 file
# $2 string
#
bpRemoveLineContaining() { ##I Remove line in file if it contains given string
  grep -v "$2" "$1" > "${1}_tmp"
  mv -f "${1}_tmp" "${1}"
}

#
# Check if string exists in file
#
# $1 file
# $2 string
# return 1 for true, 0 for false
#
bpStrExist() { ##I Check if string exist in file
  
  if grep -q -F "$2" "$1" ; then
    echo "1"
  else
    echo "0"
  fi
}

##C- IHELP Input

#
# Read string from commandline
#
# $1  Question string
# $2  Default value
# return string read from cmdline/default if enter pressed
#
bpRead() { ##I Read from commandline

  if [ "${2}" == "" ]; then
    read -erp "${1} >" result
  else
    read -erp "${1} [$2] >" result
    if [ "${result}" == "" ]; then
      result="${2}"
    fi
  fi

  echo "${result}"
}

#
# Read integer from commandline
#
# $1  Question string
# $2  Default value
# $3  min value
# $4  max value
# return integer read from cmdline/default if enter pressed
#
bpReadInt() { ##I Read integer from commandline
  while true; do
    if [ "${2}" == "" ]; then
      read -erp "${1} ($3-$4) >" result
      if [ "${result}" == "" ]; then
        result=$(($3 - 1))
      fi
    else
      read -erp "${1} ($3-$4) [$2] >" result
      if [ "${result}" == "" ]; then
        result="${2}"
      fi
    fi
    if [ $((result)) -ge "$3" ] && [ $((result)) -le "$4" ]; then
      break
    fi
  done
  echo "${result}"
}


#
# $1 question text
# $2 default answer 0 = yes, 1 = no
# return 0 = Yes, 1=No
#
bpReadYN() {  ##I Ask yes/no question generic 
  while true; do
  
    if [ "$2" -eq 1 ]; then 
      yn=$( bpRead "${1} [y/N]" )      
    else
      yn=$( bpRead "${1} [Y/n]" )
    fi
  
    case "$yn" in
      [Yy]* ) return 0;  break;;
      [Nn]* ) return 1;  break;;
      ""    ) return "$2"; break;;
      * ) echo "Please answer yes or no.";;
    esac
  done
}

#
# $1 Question text
# return 0 = Yes, 1=No
#
bpReadY() { ##I Ask yes/no question default yes
  bpReadYN "$1" 0
  return $?
}

#
# $1 Question text
# return 0 = Yes, 1=No
#
bpReadN() { ##I Ask yes/no question default no
  bpReadYN "$1" 1
  return $?
}


#---------------------------------------------------------------------
#
#---------------------------------------------------------------------

# Settings file ------------------------------------------------------

##C- BP_SETTINGS Bashplate settings

bpAddSetting() { 

  # Check if setting exist in file
  S=$(bpStrExist "${1}" "${2}" )

  if [ "${S}" == "0" ]; then
    {
      echo "# ${4}" 
      echo "${2}=\"${3}\"" 
      echo 
    } >> "${1}"
  fi
}

bpAddSettings() {
  bpAddSetting $BP_SETTINGS_FILE "BP_NAME"    "John Doe"          "Name of user"
  bpAddSetting $BP_SETTINGS_FILE "BP_EMAIL"   "JohnDoe@foo.bar"   "Email of user"
  bpAddSetting $BP_SETTINGS_FILE "BP_EDITOR"  "vi"                "Default editor"
  bpAddSetting $BP_SETTINGS_FILE "BP_LICENSE" "MIT"               "Default project license"
  bpAddSetting $BP_SETTINGS_FILE "BP_ORG"     "ACME"              "Default organisation"
  bpAddSetting $BP_SETTINGS_FILE "BP_DIFF"    "meld"              "Default diff program"	
  bpAddSetting $BP_SETTINGS_FILE "BP_PATH"    "${BP_SCRIPT_PATH}" "Path to Bashplates directory"
}

# Change setting in config file (key value pair)
#
# arg1 config file
# arg2 setting to change
# arg3 new value for setting
#
bpChSetting() {  
  SETTING="$2"
  VAL="$3"
  
  S=$(bpStrExist "${1}" "${2}" )
  if [ "${S}" == "0" ]; then
    bpAddSettings
  fi
  sed -i "s/^\(${SETTING}\s*=\s*\).*\$/\1$VAL/" "$1"
	
  bpInfo "Setting ${SETTING} to ${VAL}"
}

bpCreateSettings() {
  bpInfo "Creating new bashplates settings. $( bpColorizeFile ${BP_SETTINGS_FILE} )"
  bpMkDir "${BP_SETTINGS_DIR}"
  bpMkDir "${BP_SETTINGS_PATHS}"
  bpMkDir "${BP_SETTINGS_MODULES}"
  
  # if file does not exist add header
  if [ ! -e ${BP_SETTINGS_FILE} ]; then
    echo "# " >> ${BP_SETTINGS_FILE}
    echo "# Bashplates common settings" > ${BP_SETTINGS_FILE}
    echo "# " >> ${BP_SETTINGS_FILE}
    echo      >> ${BP_SETTINGS_FILE}
  fi
  bpAddSettings
}

bpLoadSettings() {
  if [ -n "${BP_SETTINGS_FILE}" ]; then
    if [ -e "${BP_SETTINGS_FILE}" ]; then
      source "${BP_SETTINGS_FILE}"
    else
      bpCreateSettings
      source "${BP_SETTINGS_FILE}"
    fi
  fi
}

settings() { ##C BP_SETTINGS Print bashplate settings
  bpTextLine "Bashplates settings"
  bpPrintVar BP_NAME      "Name:"
  bpPrintVar BP_EMAIL     "Email:"
  bpPrintVar BP_LICENSE   "Default license:"
  bpPrintVar BP_EDITOR    "Default editor"
  bpPrintVar BP_ORG       "Default organisation"
  bpPrintVar BP_DIFF      "Default diff program"
  bpLine
}

setname() { ##C BP_SETTINGS Set name
  bpChSetting "${BP_SETTINGS_FILE}" "BP_NAME" "\"${2}\""
}

setemail() { ##C BP_SETTINGS Set email address
  bpChSetting "${BP_SETTINGS_FILE}" "BP_EMAIL" "\"${2}\""  
}

seteditor() { ##C BP_SETTINGS Set default editor
  bpChSetting "${BP_SETTINGS_FILE}" "BP_EDITOR" "\"${2}\""  
}

setlic() { ##C BP_SETTINGS Set default license
  bpChSetting "${BP_SETTINGS_FILE}" "BP_LICENSE" "\"${2}\""  
}

setorg() { ##C BP_SETTINGS Set default organisation
  bpChSetting "${BP_SETTINGS_FILE}" "BP_ORG" "\"${2}\""  
}

setdiff() { ##C BP_SETTINGS Set default organisation
  bpChSetting "${BP_SETTINGS_FILE}" "BP_DIFF" "\"${2}\""  
}

##- Bashrc path/module handling


lspath() { ##D List paths
  bpLsLinks "${BP_SETTINGS_PATHS}"
}

addpath() { ##D Add path
  bpAddPath $2
}

lsmodules() { ##D List modules
  bpLsLinks "${BP_SETTINGS_MODULES}"
}

addmodule() { ##D Add module
  bpAddModule $2
}

rmmodule() { ##D Remove module
  bpRmModule $2
}



#
# $1 Directory to search
#
bpLsLinks() { ##I List symbolic links in a directory
  for p in $(find "$1" -type l); do
    echo "$( readlink ${p} )"
  done
}

#
# $1 
# $2
#
bpAddLink() { ##I Add symbolic link to dir
  if [ ! -L "$1" ]; then
     ln -s "${1}" "${2}"
  fi
}

#
# $1 directory to add to path
#
bpAddPath() { ##I Add dir to PATH variable
  # Replace / with _
  ll=$( echo "${1}" | sed -e 's/\//_/g' )
  if [ ! -L "$1" ]; then
     ln -s "${1}" "${BP_SETTINGS_PATHS}/${ll}"
		 bpInfo "Adding PATH \"${2}\""
  fi
}

bpRmPath() { ##I Remove path
  bpRm "${BP_SETTINGS_PATHS}/${1}"
}

bpAddModule() { ##I Add init script to
  m=$( realpath "${1}" )
  if [ ! -L "$m" ]; then
	  rm -f "${BP_SETTINGS_MODULES}/$(basename $m)"
    ln -s "$m" "${BP_SETTINGS_MODULES}/."
		bpInfo "Adding module $(bpColorizeFile $m)"
  fi
}

bpRmModule() { ##I Remove module
  bpRm "${BP_SETTINGS_MODULES}/${1}"
}


# Logging ---------------------------------------------------------

##C- IHELP Log functions

#
# Function logging to file
#
# Arg1 String to log to file
#
bpLog() { ##I Log to file command
  # check for APP_LOGFILE variable
  if [ -n "$APP_LOGFILE" ]; then
    ts=$(date +"%Y-%m-%d %H:%M:%S")
    bpFilterEscape "$ts $1"  >> "${APP_LOGFILE}"
  fi
}

bpLogOk() { ##I Log Ok message to file
  bpLog "[ Ok ] $1"
}

bpLogInfo() {  ##I Log Info message to file
  bpLog "[Info] $1"
}

bpLogWarning() {  ##I Log Warning message to file
  bpLog "[Warn] $1"
}

bpLogError() {  ##I Log Error message to file
  bpLog "[Erro] $1"
}

bpLogCritical() {  ##I Log Critical message to file
  bpLog "[Crit] $1"
}

log() { ##C APP_LOGFILE View logfile
  if [ -n "$APP_LOGFILE" ]; then
    if [ -f "${APP_LOGFILE}" ]; then  # Check that logfile exists
      D=$(sed -r -e "s|\[Info\]|\[\\${BP_C_INFO}Info\\${E_END}\]|"  \
            -e "s|\[Warn\]|\[\\${BP_C_WARNING}Warn\\${E_END}\]|"  \
            -e "s|\[Erro\]|\[\\${BP_C_ERROR}Erro\\${E_END}\]|"    \
            -e "s|\[ Ok \]|\[\\${BP_C_OK} Ok \\${E_END}\]|"    \
            -e "s/[-0-9]+/\\${E_GREEN}&\\${E_END}/1"            \
            -e "s/[:0-9]+/\\${E_BR_GREEN}&\\${E_END}/6"            \
            -e "s|\[Crit\]|\[\\${E_ON_RED}\\${E_WHITE}Crit\\${E_END}\]|" < "${APP_LOGFILE}" )

      echo -e "$D"
    fi
  else
    bpInfo "Logging is not activated"
    bpExit
  fi
}

mlog() {   ##C APP_LOGFILE Monitor logfile
  if [ -n "$APP_LOGFILE" ]; then
    if [ -f "${APP_LOGFILE}" ]; then  # Check that logfile exists
      tail -f "${APP_LOGFILE}" | sed -r -e "s|\[Info\]|\[\\${BP_C_INFO}Info\\${E_END}\]|"  \
            -e "s|\[Warn\]|\[\\${BP_C_WARNING}Warn\\${E_END}\]|"  \
            -e "s|\[Erro\]|\[\\${BP_C_ERROR}Erro\\${E_END}\]|"    \
            -e "s|\[ Ok \]|\[\\${BP_C_OK} Ok \\${E_END}\]|"    \
            -e "s/[-0-9]+/\\${E_GREEN}&\\${E_END}/1"            \
            -e "s/[:0-9]+/\\${E_BR_GREEN}&\\${E_END}/6"            \
            -e "s|\[Crit\]|\[\\${E_ON_RED}\\${E_WHITE}Crit\\${E_END}\]|"

    fi
  else
    bpInfo "Logging is not activated"
    bpExit
  fi
}

##C- IHELP Message

bpOk() { ##I Success message
  if [ -n "$BP_LOG_OK" ]; then
    bpLogOk "$1"
  fi  
  echo -e "[${BP_C_OK}Ok${E_END}] $1"
}

bpInfo() { ##I Info message
  if [ -n "$BP_LOG_INFO" ]; then
    bpLogInfo "$1"
  fi
  echo -e "[${BP_C_INFO}Info${E_END}] $1"
}

bpWarning() { ##I Warning message
  if [ -n "$BP_LOG_WARNING" ]; then
    bpLogWarning "$1"
  fi
  echo -e "[${BP_C_WARNING}Warning${E_END}] $1"
}

bpError() { ##I Error message
  if [ -n "$BP_LOG_ERROR" ]; then
    bpLogError "$1"
  fi
  echo -e "[${BP_C_ERROR}Error${E_END}] $1"
}

bpCritical() { ##I Critical error message
  if [ -n "$BP_LOG_CRITICAL" ]; then
    bpLogCritical "$1"
  fi
  echo -e "[${BP_C_CRITICAL}Critical${E_END}] $1"
  bpExit
}

# Various  ---------------------------------------------------------

##C- IHELP Assert

bpAssertRoot() { ##I Assert that user is root
  if [ "$(whoami)" != root ]; then
    bpError "Must be root to use this command."
    bpExit "1"
  fi
}

bpAssertNoLockFile() { ##I Assert that lockfile is not present
  if [ -n "$APP_LOCK_FILE" ]; then
    if [ -f "$APP_LOCK_FILE" ]; then
      bpError "Script is already running. (${APP_LOCK_FILE})"
      exit  "1" # do not use bpExit because lock file belongs to prexsisting process
    fi
    touch "$APP_LOCK_FILE"
  fi
}

#
# $1 string list of programs that are required
#
bpAssertProgs() { ##I Assert that required programs are available on the system
  things=("$@")
  e=0
  for thing in "${things[@]}" ;do
    hash "$thing" 2>&- || \
      { bpError "Required program \"$thing\" not found."; e=1; }
  done
  if [ $e -eq 1 ]; then
    bpExit 1
  fi
}

##C- IHELP Debug/Controll

icheck() { ##I Make a shellcheck
  bpAssertProgs "shellcheck"
  shellcheck "$0"
}

irt() { ##I Remove tabs from script
  sed -i -e 's/\t/  /g' "${BP_SCRIPT_PATH}/${BP_SCRIPT_NAME}"
}

##C- IHELP Help & info

printCommand() {
  help_line=$1
  help_command=$(echo "$help_line" | sed -s 's/(.*//')
  help_info=$(echo "$help_line" | sed -s 's/^.*'"$2"'//')
  bpPrintInfo "$help_command" "$help_info"
}

printCondCommand() {
  help_line="$1"
  C=$(echo "$1" | sed -s 's/^.*##C//' | awk '{print $1}')
  
  eval "D=\$$C"
  
  help_command=$(echo "$help_line" | sed -s 's/(.*//')
  help_info=$(echo "$help_line" | sed -s 's/^.*'"$C"'//')

  if [ -n "$D" ]; then
    bpPrintInfo "$help_command" "$help_info"
  else
    if [ "$2" -eq 1 ]; then
      bpPrintInfoAlt "$help_command" "$help_info"
    fi
  fi
}

printNamedLine() {
  name=$(echo "$1" | sed -e 's/^.*##-//' -e 's/^[ \t]*//' )
  bpTextLine "$name"
}

printCondNamedLine() {
  help_line="$1"
  C=$(echo "$1" | sed -s 's/^.*##C-//' | awk '{print $1}')
  name=$(echo "$help_line" | sed -e 's/^.*'"$C"'//' -e 's/^[ \t]*//' )
  eval "D=\$$C"
  if [ -n "$D" ]; then
    bpTextLine "$name"
  fi
}

# 
# $1 hook
# Warning: does not work, do not use
#
bpExecHook() { 
  bpInfo  "Executing hook $1"
  eval "hook=\$$1"
  if [ -n "$hook" ]; then
    "$hook" "$1" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" 
    return 0
  fi
  return 1
}

help() { ##D Print this help information
  echo "$APP_USAGE"
  echo -e "$APP_DESC"
  echo 
	
  BP_HELP=1
	
  if [ ! -e "${BP_SETTINGS_DIR}" ] && [ -n "${BP_SETTINGS}" ]; then
    BPINIT=1	
  fi
	
 # bpExecHook "PRE_HELP_HOOK"
  if [ -n "$PRE_HELP_HOOK" ]; then
    "${PRE_HELP_HOOK}" 
  fi

  IFS=$'\n'
  SC="$1"
  help_lines=$(grep -h '##' "$0" | grep -v -e 'grep' -e '##I' -e '##V' -e '\*##C' -e '\*##C-' -e '\"##' -e '##-//' -e 'help_line' -e 'printLine')
  for help_line in ${help_lines} ; do
    case "$help_line" in
      *"##-"*)   printNamedLine     "$help_line" ;;
      *"##C-"*)  printCondNamedLine "$help_line" ;;
      *"##CV"*)  printCondCommand  "$help_line" 1 ;;
      *"##C"*)   printCondCommand  "$help_line" 0 ;;
      *"##D"*)   printCommand       "$help_line" '##D' ;;
      *)
      ;;
    esac
  done

  if [ -n "$POST_HELP_HOOK" ]; then
    "${POST_HELP_HOOK}" 
  fi
}

ihelp() { ##I Print internal help information  

  # Singe command documentation
  if [ "$2" != "" ]; then
    echo
    bpTextLine "$2"
    echo
    grep --no-filename -B 10 "$0" -e "${2}()" | grep "#" | grep -v "##"
    bpLine
    bpExit
  fi

  IFS=$'\n'
  SC="$1"

  IHELP=1    # Force ihelp documentations
  APP_LOGFILE=1  # Force log documentation

  help_lines=$(grep -h '##[C|I|-]' "$0" | grep -v -e 'grep' -e '\*"##[ A-Z]"\*' -e 'help_line' -e 'printNamedLine' -e 'awk' -e 'bpPrintInfo' -e 'name' )
  for help_line in ${help_lines} ; do
    case "$help_line" in
      *"##-"*)   printNamedLine     "$help_line" ;;
      *"##C-"*)  printCondNamedLine "$help_line" ;; 
      *"##I"*)   printCommand       "$help_line" '##I' ;;
      *"##C"*)   printCondCommand   "$help_line" 0 ;;
      *)
      ;;
    esac
  done

  bpTextLine "Bashplates comments"
  bpPrintInfo "##D Description"      "Subcommand information comment (shown with help)"
  bpPrintInfo "##C COND Description" "Conditional subcommand comment (shown with help)"
  bpPrintInfo "##- [Text]"           "Separator line (shown with help)"
  bpPrintInfo "##C- COND [Text]"     "Conditional separator line (shown with help)"
  bpPrintInfo "##I Description"      "Internal function comment (shown ihelp)"
  bpLine
}

iinfo() { ##I Show information about script
  bpTextLine "Script information"
  bpPrintVar "BP_SCRIPT_NAME"     "Script" "$( bpColorizeFile "${BP_SCRIPT_PATH}/${BP_SCRIPT_NAME}" )"
  bpPrintVar "APP_VERSION"        "Script version" 
  bpPrintVar "BP_VERSION"         "Template version"
  bpPrintVar "BP_SETTINGS_FILE"   "Bashplate settings file" "$( bpColorizeFile ${BP_SETTINGS_FILE} )"
  bpPrintVar "APP_LOGFILE"        "Log file"  "$( bpColorizeFile "${APP_LOGFILE}" )"
  bpPrintVar "APP_LOCK_FILE"      "Lock file" "$( bpColorizeFile "${APP_LOCK_FILE}" )"
  bpPrintVar "DEFAULT_CMD_HOOK"   "Default function" 
  bpPrintInfo "PID" "$$"  
  bpPrintVar "BP_DATE"            "Date" 
  bpPrintVar "BP_TIME"            "Time"
  bpPrintVar "BP_COLUMNS"         "Character columns"
  bpPrintVar "BP_LINES"           "Character lines"

  if [ -n "${POST_INFO_HOOK}" ]; then
    bpTextLine "App. information"
    ${POST_INFO_HOOK}
  fi
  settings
}

#
iview() {  ##I View example
#  VF='s/\$[{]?[a-zA-Z0-9_]*[}]?/'"\\${BP_C_VAR}&\\${E_END}/" 
  # Singe command documentation
  if [ "$2" != "" ]; then
    echo
    bpTextLine "$2"
    echo
    grep --no-filename -A 60  "$0" -e "${2}()" | grep -B 60 -m 1 -x "}" | \
      sed  -e "s/#.*/\\${BP_C_COMMENT}&\\${E_END}/"          \
             -e "s/\<echo\>/\\${BP_C_RESERVED}&\\${E_END}/"    \
             -e "s/\<if\>/\\${BP_C_RESERVED}&\\${E_END}/"      \
             -e "s/\<then\>/\\${BP_C_RESERVED}&\\${E_END}/"    \
             -e "s/\<else\>/\\${BP_C_RESERVED}&\\${E_END}/"    \
             -e "s/\<fi\>/\\${BP_C_RESERVED}&\\${E_END}/"      \
             -e "s/\<do\>/\\${BP_C_RESERVED}&\\${E_END}/"      \
             -e "s/\<done\>/\\${BP_C_RESERVED}&\\${E_END}/"    \
             -e "s/\<elif\>/\\${BP_C_RESERVED}&\\${E_END}/"    \
             -e "s/\<case\>/\\${BP_C_RESERVED}&\\${E_END}/"    \
             -e "s/\<esac\>/\\${BP_C_RESERVED}&\\${E_END}/"    \
             -e "s/\<for\>/\\${BP_C_RESERVED}&\\${E_END}/"     \
             -e "s/\<in\>/\\${BP_C_RESERVED}&\\${E_END}/"      \
             -e "s/\<select\>/\\${BP_C_RESERVED}&\\${E_END}/"  \
             -e "s/\<time\>/\\${BP_C_RESERVED}&\\${E_END}/"    \
             -e "s/\<until\>/\\${BP_C_RESERVED}&\\${E_END}/"   \
             -e "s/\<select\>/\\${BP_C_RESERVED}&\\${E_END}/"  \
             -e "s/\<eval\>/\\${BP_C_RESERVED}&\\${E_END}/"  \
             -e "s/\<break\>/\\${BP_C_RESERVED}&\\${E_END}/"  \
             -e "s/\<while\>/\\${BP_C_RESERVED}&\\${E_END}/"    \
             -e "s/\".*\"/\\${BP_C_STRING}&\\${E_END}/"        \
             -e "s/\([^=]*\)=/${BP_C_VAR}\1\\${E_END}=/"        \
#             -e $VF
#             -e 's/\$[{]?[a-zA-Z0-9]*[}]?/XXX/'
#             -e 's/$?/'"\\${BP_C_VAR}&\\${E_END}/" \
    bpLine
    bpExit
  fi
}

ivars() { ##I Print internal variables
  bpTextLine "Script variables"
  echo
  IFS=$'\n'
  help_lines=$( grep -v -e 'help_lines' -e 'help_line' "$0" | grep -A 1 '##V'   ) # | sed "s/--//" )
  for line in ${help_lines}; do
    if [ "$line" == "--" ]; then
      echo
    else
      help_line=$(echo "${line}" | sed -u -e "s/##V[ ]/${BP_C_DESCRIPTION}/i" -e "s/^.*=/${BP_C_ID}&${E_END}/i" -e "s/=/${E_END}=/" )
      echo -e "$help_line"
      echo -en "$E_END"
  fi
  done
  echo
}

ied() { ##I Open this file with standard editor
  if [ -n "$BP_EDITOR" ]; then
    ${BP_EDITOR} $0
  else
    bpError "BP_EDITOR variable not set, can't open script file"
  fi
}



version() { ##D Print version information
  echo "$APP_VERSION"
}

# Runs a function in this file as a command
bpRunCommand() {
  if [ "$BP_ARGUMENTS" -eq 0 ]; then

    # check for a default command
    if [ -n "$DEFAULT_CMD_HOOK" ]; then
      "$DEFAULT_CMD_HOOK" "$1" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}"
      bpExit
    fi
    bpErrorExit "No command given"
  fi

  if [ "$( type -t $1 )" = "function" ]; then # Check if subcommand is declared as function
      command=$1
      # execute pre command hook  if existing
      if [ -n "$PRE_CMD_HOOK" ]; then
        "${PRE_CMD_HOOK}" "$command"
      fi

      # Check if command is conditional
      if [[ $( grep "${command}()" "$0" ) = *"##C"* ]]; then  

        # Check if condition is true and then execute else printout error message
        C=$( grep "${command}()" "$0"  | sed -s 's/^.*##C.//' | awk '{print $1}' )
        if [ -n "$C" ]; then
          eval "D=\$$C"

          if [ -n "$D" ]; then
            # execute command
            "${command}" "$@" 
          else
            bpError "Command \"$command\" not available right now."
          fi
        else
          bpError "Command \"$command\" is conditional, but is missing conditional variable"
        fi
      else 
        # command is not conditional, execute
        "${command}" "$@"
      fi

      # execute post command hook  if existing
      if [ -n "$POST_CMD_HOOK" ]; then
        "${POST_CMD_HOOK}" "$command"
      fi      
      bpExit
  else
    bpErrorExit "Command \"$1\" not found"
  fi
}

#---------------------------------------------------------------------
# Initiate internal variables
#---------------------------------------------------------------------

##V Bashplate version
BP_VERSION="1.20"

##V Directory where script is located
BP_SCRIPT_PATH=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

##V Name of script
BP_SCRIPT_NAME=$(basename "$0")

##V Number of arguments given to script
BP_ARGUMENTS=$#

##V Current date
BP_DATE=$(date +"%Y-%m-%d")

##V Current time
BP_TIME=$(date +"%H:%M:%S")

##V Number of columns in terminal
BP_COLUMNS=$(tput cols)

##V Number of lines in terminal
BP_LINES=$(tput lines)

##V Settings directory
BP_SETTINGS_DIR=~/.config/bashplates

##V Settings file
BP_SETTINGS_FILE=${BP_SETTINGS_DIR}/bashplates.conf

##V System Path's
BP_SETTINGS_PATHS="${BP_SETTINGS_DIR}/path"

##V Links to modules
BP_SETTINGS_MODULES="${BP_SETTINGS_DIR}/modules"

# Initiate bashplate settings
bpInitSettings

# Initiate user settings
bpUserSettings

#---------------------------------------------------------------------
# Setup signal traps
#---------------------------------------------------------------------

trap  signalQuit SIGQUIT
trap  signalInt  SIGINT
trap  signalHup  SIGHUP
trap  signalTerm SIGTERM
trap  'signalErr ${FUNCNAME} ${LINENO}' ERR

#trap  'signalDbg ${FUNCNAME} ${LINENO}' DEBUG

#---------------------------------------------------------------------
# Load settings and execute script handler
#---------------------------------------------------------------------

# Load configuration file settings
bpLoadSettings

# execute prescript hook if existing
if [ -n "$PRE_SCRIPT_HOOK" ]; then
  ${PRE_SCRIPT_HOOK} "$@"
fi

# Run command parser
bpRunCommand "$@"

# Exit cleanly
bpExit

##C- BP_HELP
