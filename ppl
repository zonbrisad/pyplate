#!/usr/bin/env bash
# shellcheck disable=2034
#---------------------------------------------------------------------
#
#  [Description]
#    Pyplate help tool. This file is not part of the template itself
#    and shoud be erased when creating a new project based on this
#    template.
#
#  [Author]
#    Peter Malmberg <peter.malmberg@gmail.com>
#
#  [License]
#     MIT
#
#---------------------------------------------------------------------
# [Bashplates]
# This script is generated from bashplates template generator.
#
# Bashplates is developed by:
# Peter Malmberg <peter.malmberg@gmail.com>
#
# Bashplates is available at:
# https://github.com/zonbrisad/bashplates
#---------------------------------------------------------------------
#

# Display commands as they are executed
#set -o xtrace
# Display shell input lines as they are read
#set -v

# Exit script when a command fails. Append ||true if error is expected
#set -o errexit # || true
# Exit script when undeclared variable is used
#set -o nounset
# Exit script when pipe fails
set -o pipefail

# Directory where script is located
scriptPath=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

# Name of script
scriptName=$(basename "$0")

#---------------------------------------------------------------------
# User defined Settings
#---------------------------------------------------------------------


# Settings directory
#MP_CONFIG_DIR=~/.config/pyplate

# Directory for 3d party files
#MP_3DPARTY_DIR=${scriptPath}/3dparty

#---------------------------------------------------------------------
# User defined functions
#---------------------------------------------------------------------



#
# Ask yes/no question
#
# arg1 question text
# arg2 result variable name
#
bpQuestionDy() {  ##D Ask yes/no question default yes 
  local __result=$2
  while true; do
	  read -p "${1}"" [Y/n]>" yn
    case $yn in
	    [Yy]* ) eval $__result='y'; break;;
			[Nn]* ) eval $__result='n'; break;;
			""    ) eval $__result='y'; break;;
			* ) echo "Please answer yes or no.";;
		esac
	done 	
}


createProject() {
  echo -e ${1}
  
  pn=$(bpRead "Project name")
  desc=$(bpRead "Enter script description")
	author=$(bpRead "Project author" "${BP_NAME} <${BP_EMAIL}>" )

	bpCp "${2}" ./${pn}.py
	
  bpReplace ./${pn}.py "__NAME__"    "${pn}"
  bpReplace ./${pn}.py "__DATE__"    "${DATE}"
  bpReplace ./${pn}.py "__LICENSE__" "${BP_LICENSE}"
  bpReplace ./${pn}.py "__AUTHOR__"  "${author}"
  bpReplace ./${pn}.py "__DESC__"    "${desc}"
	bpReplace ./${pn}.py "__ORG__"     "${BP_ORG}"
	
}

##N- Pyplate


news() { ## Create new simple python project
  createProject "Creating new simple python project" ${scriptPath}/pyplate-basic.py 
}

new() { ## Create new cli python project with option parsing
  createProject "Creating new python project" ${scriptPath}/pyplate.py
}

newqt() { ## Create new QT5 python project 
  createProject "Creating new Qt5 python project" ${scriptPath}/pyplate-qt5.py
}

##N- Project management (git)

clean() { ## Remove leftover files 
  cd "${scriptPath}"

  find . -name "*~"     -delete
  find . -name "*.orig" -delete

  # Remove untraced files
  git clean -df
  cd -
}

commit() { ## Commit project to repository
  cd "${scriptPath}"
  git commit -a
  #git push --tags -a
  cd - || bpExit
}

tag() { ## Make a new tag
  cd "${scriptPath}"
  # List existing tags
  git tag

  # read tag name/description
  tag=$( bpRead "Tagname" "")
  desc=$( bpRead "description" "")
  read -p "Description: " desc

  # Tag revision
  git tag -a "$tag" -m "$desc"
  cd - || bpExit
}

push() { ## Push to GITHUB
  cd "${scriptPath}"
  git push --progress
  cd - || bpExit
} 

pull() { ## Pull pyplates from GITHUB
  cd "${scriptPath}"
  git pull --progress
  cd - || bpExit
} 

#---------------------------------------------------------------------
# Bashplate settings
#---------------------------------------------------------------------

# Script version info
VERSION="1.01"

##V Bashplate version
BPVERSION="1.11"

##V Usage info
USAGE="Usage: ${scriptName} command [option]"

# Description text
DESC="Help tool for pyplate project"

##V logfile (uncomment to use logfile)
LOGFILE=${scriptPath}/${scriptName}.log

##V Logging options (uncomment to activate logging parameters)
#LOG_OK=1
#LOG_INFO=1
#LOG_WARNING=1
#LOG_ERROR=1
#LOG_CRITICAL=1

##V Default command (uncomment to use a default command )
DEFAULTCMD=help

##V Pre script hook, execute this function before every command
#PREHOOK=preCheck

##V Post script hook, execute this function after every command
#POSTHOOK=

##V Function to be executed before every other cmd except DEFAULTCMD function
#PRECMDHOOK=

##V Function to be executed after every other function except DEFAULTCMD function
#POSTCMDHOOK=

##V Function to be executed after information command
#INFOHOOK=

##V Programs that are required to run the script (uncomment to use)
#REQUIRED_PROGRAMS=(ls mv kalle)

##V Lock file (uncomment to use lock file feature )
#LOCK_FILE=/tmp/${scriptName}.lock

# Activate settings function (will create settings file when run)
BPSETTINGS=1

bpSettingsDir=~/.config/bashplates
bpSettingsFile=${bpSettingsDir}/bashplates.conf

# Create settings file if non existent
#CREATEPLSETTINGS=1


#---------------------------------------------------------------------
# Signal traps
#---------------------------------------------------------------------

signalInt() {
  bpCleanUp
  exit "$BP_E_OK"
}

signalHup() {
  bpCleanUp
}

signalQuit() {
  echo "Quit"
  bpCleanUp
}

signalTerm() {
  echo "Term"
  bpCleanUp
}

bpCleanUp() { ##D Cleanup function
  rm -f "$LOCK_FILE"    # remove Lock file
}

bpExit() { ##D Function for safely exiting script
  bpCleanUp

  # execute postscript hook if existing
  if [ -n "$POSTHOOK" ]; then
     ${POSTHOOK}
  fi

  exit
}

bpErrorExit() {  ##D Safely exit script with a error
  #echo -e "${BP_C_ERROR}${1}${E_END}"
  bpError "${1}"
  bpCleanUp
  exit
}

#---------------------------------------------------------------------
# Bashplate internal functions
#---------------------------------------------------------------------

# ANSI foreground colors codes
#

E_BLACK=$'\e[0;30m'        # Black
E_RED=$'\e[0;31m'          # Red
E_GREEN=$'\e[0;32m'        # Green
E_YELLOW=$'\e[0;33m'       # Yellow
E_BLUE=$'\e[0;34m'         # Blue
E_MAGENTA=$'\e[0;35m'      # Magenta
E_CYAN=$'\e[0;36m'         # Cyan
E_GRAY=$'\e[0;37m'         # Gray
E_DARKGRAY=$'\e[1;30m'     # Dark Gray
E_BR_RED=$'\e[1;31m'       # Bright Red
E_BR_GREEN=$'\e[1;32m'     # Bright Green
E_BR_YELLOW=$'\e[1;33m'    # Bright Yellow
E_BR_BLUE=$'\e[1;34m'      # Bright Blue
E_BR_MAGENTA=$'\e[1;35m'   # Bright Magenta
E_BR_CYAN=$'\e[1;36m'      # Bright Cyan
E_WHITE=$'\e[1;37m'        # White

# ANSI background color codes
#
E_ON_BLACK=$'\e[40m'       # Black
E_ON_RED=$'\e[41m'         # Red
E_ON_GREEN=$'\e[42m'       # Green
E_ON_YELLOW=$'\e[43m'      # Yellow
E_ON_BLUE=$'\e[44m'        # Blue
E_ON_MAGENTA=$'\e[45m'     # Magenta
E_ON_CYAN=$'\e[46m'        # Cyan
E_ON_WHITE=$'\e[47m'       # White

# ANSI Text attributes
E_ATTR_BOLD=$'\e[1m'
E_ATTR_LOWI=$'\e[2m'
E_ATTR_UNDERLINE=$'\e[4m'
E_ATTR_BLINK=$'\e[5m'
E_ATTR_REVERSE=$'\e[7m'

# ANSI cursor operations
#
E_RETURN=$'\e[F'           # Move cursor to begining of line
E_UP=$'\e[A'               # Move cursor one line up
E_DOWN=$'\e[B'             # Move cursor one line down
E_FORWARD=$'\e[C'          # Move cursor forward
E_BACK=$'\e[D'             # Move cursor backward
E_HIDE=$'\e[?25l'          # Hide cursor
E_SHOW=$'\e[?25h'          # Show cursor

E_END=$'\e[m'              # Clear Attributes

# Internal bashplate colors
BP_C_OK=$E_BR_GREEN
BP_C_INFO=$E_BR_CYAN
BP_C_WARNING=$E_BR_YELLOW
BP_C_ERROR=$E_BR_RED
BP_C_CRITICAL=$E_ON_RED$E_WHITE

BP_C_LINE=$E_DARKGRAY
BP_C_LINE_TEXT=$E_YELLOW

BP_C_COMMENT=$E_GREEN
BP_C_ID=$E_CYAN

# Exit codes
#
BP_E_OK=0            # successful termination


##CN- IHELP Printing functions

# Print text with row
#
# arg1 text to be printed
# arg2 text color
# arg3 line color
# arg4 middle character
# arg5 line character
bpPrintLineC() { ##D Print text with adjusted line after with selectable colors
  len1="${#1}"
  len4="${#4}"

  echo -en "${2}${1}${4}${3}"
  l=$((COLUMNS - len1 - len4 - 3 ))
  seq -s"${5}" "${l}"|tr -d '[:digit:]'
  echo -en ${E_END} 
}

# Print text with row
#
# arg1 text to be printed
# arg2 text color
# arg3 line color
bpTextLineC() { ##D Print text with adjusted line after with selectable colors
  bpPrintLineC "$1" "$2" "$3" " " "-"
}

bpTextLine() { ##D Print text with line after
  bpTextLineC "$1" "${BP_C_LINE_TEXT}" "${BP_C_LINE}"
}

# Print a divider row
bpLine() { ##D Print a line
  bpPrintLineC "" "${BP_C_LINE}" "${BP_C_LINE}" "" "-"
}

# Legacy function (do not use in new applications)
printLine() {
  bpLine
}


# Print text into two columns
#
# arg1 text for column 1
# arg2 text for column 2
printInfo() {
  printf "${BP_C_ID}  %-24s${E_END} ${BP_C_COMMENT}%s${E_END}\n" "$1" "$2"
}

# Print a variable + text into two columns
#
# arg1 variable for column 1
# arg2 text for column 2
printVar() {
  var="$1"
  if [ "${!var}" ]; then
    printInfo "$2" "${!var}"
  else
    printf "${BP_C_ID}  %-24s${E_END} ${E_RED}N/A${E_END}\n" "$2"
  fi
}

##CN- IHELP File operations

# Create a directory if it does not exist
#
# $1 Directory to be created
#
bpMkDir() { ##D Create directory
  if [ ! -d "$1" ]; then
	  bpInfo "Creating directory \"${1}\""
		mkdir -p "$1"
	fi
}

#
# $1 
# $2
#
bpLn() { ##D Create symbolic link
  bpInfo "Creating link \"${2}\""
	if [ ! -L "$1" ]; then
	  ln -s "${1}" "${2}"
	fi
}

# 
# Copy file(s)
# 
# $1 file(s) to be copied
# $2 destination
#
bpCp() { ##D Copy file(s)
  bpInfo "Copying \"${1}\" to \"${2}\""
  cp -rf $*
}

#
# Move file(s)
#
# $1 file(s) to be moved
# $2 destination
bpMv() { ##D Move file(s)
  bpInfo "Moving file \"${1}\" \"${2}\""
	mv "$1" "$2"
}

# 
# Remove file(s)
# 
# $1 file(s) to be removed
#
bpRm() { ##D Remove file
  bpInfo "Removing file \"${1}\""
	rm -rf "${1}"
}

# Replace text in file
#
# $1 file 
# $2 text to replace
# $3 new text
bpReplace() {  ##D Replace text in file
  sed -i -e "s/${2}/${3}/g"  "$1"
}

# Appends a line to a file if it is not present in that file.
#
# $1 file
# $2 line to append
#
bpAppendIfNoSuchLine() { ##D Append a line if it does not exist in file
  grep -q -F "$2" "$1" || echo "$2" >> "$1"
}

# Remove line in file containing a given string
#
# $1 file
# $2 string
#
bpRemoveLineContaining() { ##D Remove line in file if it contains given string
  grep -v "$2" "$1" > "${1}_tmp"
	mv -f "${1}_tmp" "${1}"
}

#
# Check if string exists in file
#
# $1 file
# $2 string
# return 1 for true, 0 for false
#
bpStrExist() { ##D Check if string exist in file
  grep -q -F "$2" "$1" 
	if [ $? == "0" ]; then
	  echo "1"
	else
	  echo "0"
	fi
}

##CN- IHELP Input

#
# Read from commandline
#
# $1  Question string
# $2  Default value
# return string read from cmdline/default if enter pressed
#
bpRead() { ##D Read from commandline

	if [ "${2}" == "" ]; then
    read -erp "${1} >" result
	else
	  read -erp "${1} [$2] >" result
		if [ "${result}" == "" ]; then
		  result="${2}"
		fi
	fi

	echo "${result}"
}



#---------------------------------------------------------------------
#
#---------------------------------------------------------------------

# Settings file ------------------------------------------------------

##CN- BPSETTINGS Settings

bpAddSetting() { 

  # Check if setting exist in file
  S=$(bpStrExist $bpSettingsFile "${1}" )

  if [ "${S}" == "0" ]; then
    echo "# ${3}"    >>  ${bpSettingsFile}
    echo "${1}=\"${2}\"" >> ${bpSettingsFile}
    echo >> ${bpSettingsFile}
  fi
}

bpAddSettings() { 
  bpAddSetting "BP_NAME"  "John Doe"        "Name of user"
  bpAddSetting "BP_EMAIL" "JohnDoe@foo.bar" "Email of user"
  bpAddSetting "BP_EDITOR" "vi"             "Default editor"
  bpAddSetting "BP_LICENSE" "MIT"           "Default project license"
  bpAddSetting "BP_ORG"     "ACME"          "Default organisation"
}

# Change setting in config file (key value pair)
#
# arg1 config file
# arg2 setting to change
# arg3 new value for setting
#
chSetting() {  
  SETTING="$2"
  VAL="$3"
	
	S=$(bpStrExist "${1}" "${2}" )
	if [ "${S}" == "0" ]; then
	  bpAddSettings
	fi
  sed -i "s/^\(${SETTING}\s*=\s*\).*\$/\1$VAL/" "$1"
}

bpCreateSettings() {
			
  echo "Creating new bashplates settings file. ${bpSettingsFile}"
	bpMkDir ${bpSettingsDir}
					
	echo "# " >> ${bpSettingsFile}
	echo "# Bashplates common settings" > ${bpSettingsFile}
	echo "# " >> ${bpSettingsFile}
	echo      >> ${bpSettingsFile}
	
	bpAddSettings
}

bpLoadSettings() {
  if [ -n "${bpSettingsFile}" ]; then
	  if [ -e "${bpSettingsFile}" ]; then
	    source "${bpSettingsFile}"
	  else
		  bpCreateSettings
			source "${bpSettingsFile}"
		fi
	fi
}

printSettings() { ##C BPSETTINGS Print plate information
  bpTextLine "Bashplates settings"
  printVar BP_NAME      "Name:"
  printVar BP_EMAIL     "Email:"
  printVar BP_LICENSE   "Default license:"
  printVar BP_EDITOR    "Default editor"
  printVar BP_ORG       "Default organisation"
  bpLine
}

setname() { ##C BPSETTINGS Set name
  chSetting "${bpSettingsFile}" "BP_NAME" "\"${2}\""	
}

setemail() { ##C BPSETTINGS Set email address
  chSetting "${bpSettingsFile}" "BP_EMAIL" "\"${2}\""	
}

seteditor() { ##C BPSETTINGS Set default editor
  chSetting "${bpSettingsFile}" "BP_EDITOR" "\"${2}\""	
}

setlic() { ##C BPSETTINGS Set default license
  chSetting "${bpSettingsFile}" "BP_LICENSE" "\"${2}\""	
}

setorg() { ##C BPSETTINGS Set default organisation
  chSetting "${bpSettingsFile}" "BP_ORG" "\"${2}\""	
}


##-

# Logging ---------------------------------------------------------

##CN- IHELP Log functions

#
# Function logging to file
#
# Arg1 String to log to file
#
bpLog() { ##D Log to file command
  # check for LOGFILE variable
  if [ -n "$LOGFILE" ]; then
    ts=$(date +"%Y-%m-%d %H:%M:%S")
     echo "$ts" "$1" >> "${LOGFILE}"
  fi
}

bpLogOk() { ##D Log Ok message to file
  bpLog "[ Ok ] $1"
}

bpLogInfo() {  ##D Log Info message to file
  bpLog "[Info] $1"
}

bpLogWarning() {  ##D Log OK message to file
  bpLog "[Warn] $1"
}

bpLogError() {  ##D Log Error message to file
  bpLog "[Erro] $1"
}

bpLogCritical() {  ##D Log Critical message to file
  bpLog "[Crit] $1"
}

log() { ##C LOGFILE View logfile
  if [ -n "$LOGFILE" ]; then
    if [ -f "${LOGFILE}" ]; then  # Check that logfile exists
      D=$(sed -r -e "s|\[Info\]|\[\\${BP_C_INFO}Info\\${E_END}\]|"  \
            -e "s|\[Warn\]|\[\\${BP_C_WARNING}Warn\\${E_END}\]|"  \
            -e "s|\[Erro\]|\[\\${BP_C_ERROR}Erro\\${E_END}\]|"    \
            -e "s|\[ Ok \]|\[\\${BP_C_OK} Ok \\${E_END}\]|"    \
            -e "s/[-0-9]+/\\${E_GREEN}&\\${E_END}/1"            \
            -e "s/[:0-9]+/\\${E_BR_GREEN}&\\${E_END}/6"            \
            -e "s|\[Crit\]|\[\\${E_ON_RED}\\${E_WHITE}Crit\\${E_END}\]|" < "${LOGFILE}" )

      echo -e "$D"
    fi
  else
    bpInfo "Logging is not activated"
    exit
  fi
}

mlog() {   ##C LOGFILE Monitor logfile
  if [ -n "$LOGFILE" ]; then
    if [ -f "${LOGFILE}" ]; then  # Check that logfile exists
      tail -f "${LOGFILE}" | sed -r -e "s|\[Info\]|\[\\${BP_C_INFO}Info\\${E_END}\]|"  \
            -e "s|\[Warn\]|\[\\${BP_C_WARNING}Warn\\${E_END}\]|"  \
            -e "s|\[Erro\]|\[\\${BP_C_ERROR}Erro\\${E_END}\]|"    \
            -e "s|\[ Ok \]|\[\\${BP_C_OK}Erro\\${E_END}\]|"    \
            -e "s/[-0-9]+/\\${E_GREEN}&\\${E_END}/1"            \
            -e "s/[:0-9]+/\\${E_BR_GREEN}&\\${E_END}/6"            \
            -e "s|\[Crit\]|\[\\${E_ON_RED}\\${E_WHITE}Crit\\${E_END}\]|"

		fi
  else
    bpInfo "Logging is not activated"
    exit
  fi
}

##CN- IHELP Message

bpOk() { ##D Success message
  if [ -n "$LOG_OK" ]; then
    bpLogOk "$1"
  fi	
  echo -e "[${BP_C_OK}Ok${E_END}] $1"
}

bpInfo() { ##D Info message
  if [ -n "$LOG_INFO" ]; then
    bpLogInfo "$1"
  fi
  echo -e "[${BP_C_INFO}Info${E_END}] $1"
}

bpWarning() { ##D Warning message
  if [ -n "$LOG_WARNING" ]; then
    bpLogWarning "$1"
  fi
  echo -e "[${BP_C_WARNING}Warning${E_END}] $1"
}

bpError() { ##D Error message
  if [ -n "$LOG_ERROR" ]; then
    bpLogError "$1"
  fi
  echo -e "[${BP_C_ERROR}Error${E_END}] $1"
}

bpCritical() { ##D Critical error message
  if [ -n "$LOG_CRITICAL" ]; then
    bpLogCritical "$1"
  fi
  echo -e "[${BP_C_CRITICAL}Critical${E_END}] $1"
  bpExit
}

# Various  ---------------------------------------------------------

##CN- IHELP Assert
assertRoot() { ##D Assert that user is root
  if [ "$(whoami)" != root ]; then
    bpError "Must be root to use this command."
    bpExit
  fi
}

assertNoLockFile() { ##D Assert that lockfile is not present
  if [ -n "$LOCK_FILE" ]; then
    if [ -f "$LOCK_FILE" ]; then
      #echo -e "${BP_C_ERROR}Script is already running. (${LOCK_FILE})${E_END} "
      bpError "Script is already running. (${LOCK_FILE})"
      exit  # do not use bpExit because lock belongs to other process
    fi
    touch "$LOCK_FILE"
  fi
}

assertRequiredProgs() { ##D Assert that required programs are available on the system
  if [ -n "${REQUIRED_PROGRAMS}" ]; then
    for p in ${REQUIRED_PROGRAMS}; do
      hash "$p" 2>&- || \
        { bpError "Required program \"$p\" not found."; exit 1; }
#      { echo -e >&2 "${BP_C_ERROR}Required program \"$p\" not found.${E_END}"; exit 1; }
    done
  fi
}

##CN- IHELP Help & info

info() { ##D Show information about script
  bpTextLine "Script information"
  printVar scriptName      "Script name" 
  printVar scriptPath      "Script path" 
  printVar VERSION         "Script version" 
  printVar BPVERSION       "Template version"
  printVar bpSettingsFile  "Bashplate settings file"
  printVar LOGFILE         "Log file" 
  printVar LOCK_FILE       "Lock file" 
  printVar DEFAULTCMD         "Default function" 
  printVar "REQUIRED_PROGRAMS" "Dependencies"
  printInfo "PID" "$$"  
  printVar DATE "Date" 
  printVar TIME "Time"

  if [ -n "${INFOHOOK}" ]; then
    bpTextLine "App. information"
    ${INFOHOOK}
  fi
	printSettings
}

check() { ##D Make a shellcheck
  shellcheck "$0"
}

printCommand() {
  help_line=$1
  help_command=$(echo "$help_line" | sed -s 's/(.*//')
  help_info=$(echo "$help_line" | sed -s 's/^.*'"$2"'//')
  printInfo "$help_command" "$help_info"
}

printCondCommand() {
  help_line="$1"
  C=$(echo "$1" | sed -s 's/^.*##C//' | awk '{print $1}')
  eval "D=\$$C"
  if [ -n "$D" ]; then
    help_command=$(echo "$help_line" | sed -s 's/(.*//')
    help_info=$(echo "$help_line" | sed -s 's/^.*'"$C"'//')
    printInfo "$help_command" "$help_info"
  fi
}

printCondLine() {
  help_line="$1"
  C=$(echo "$1" | sed -s 's/^.*##C-//' | awk '{print $1}')
  eval "D=\$$C"
  if [ -n "$D" ]; then
     bpLine
  fi
}

printNamedLine() {
  name=$(echo "$1" | sed -e 's/^.*##N-//' -e 's/^[ \t]*//' )
  bpTextLine "$name"
}

printCondNamedLine() {
  help_line="$1"
  C=$(echo "$1" | sed -s 's/^.*##CN-//' | awk '{print $1}')
	name=$(echo "$help_line" | sed -e 's/^.*'"$C"'//' -e 's/^[ \t]*//' )
  eval "D=\$$C"
  if [ -n "$D" ]; then
    bpTextLine "$name"
  fi
}

help() { ## Print this help information
  echo "$USAGE"
  echo -e "$DESC"
  echo 
  IFS=$'\n'
  SC="$1"
  help_lines=$(grep -h '##' "$0" | grep -v -e 'grep' -e '##D' -e '##V' -e '\*##C' -e '\*##C-' -e '\"##' -e '##N-//' -e 'help_line' -e 'printLine')
  for help_line in ${help_lines} ; do
    case "$help_line" in
      *"##-"*)   bpLine ;;
      *"##C-"*)  printCondLine       "$help_line" ;;
      *"##N-"*)  printNamedLine      "$help_line" ;;
      *"##CN-"*) printCondNamedLine  "$help_line" ;;
      *"##C"*)   printCondCommand    "$help_line" ;;
      *"##"*)    printCommand        "$help_line" '##' ;;
      *)
      ;;
    esac
  done
}

ihelp() { ##D Print internal help information  

  # Singe command documentation
  if [ "$2" != "" ]; then
	  echo
	  bpTextLine "$2"
		echo
		grep --no-filename -B 10 "$0" -e "${2}()" | grep "#" | grep -v "##"
		bpLine
		exit
	fi

  IFS=$'\n'
  SC="$1"

  bpLine
  IHELP=1    # Force ihelp documentations
  LOGFILE=1  # Force log documentation

  help_lines=$(grep -h '##' "$0" | grep -v -e 'grep' -e '\*"##[ A-Z]"\*' -e 'help_line' -e ' printLine' -e 'awk' -e 'printInfo')
  for help_line in ${help_lines} ; do
    case "$help_line" in
#      "##-")    bpLine ;;
      *"##D"*)  printCommand  "$help_line" '##D' ;;
      *"##C-"*) printCondLine "$help_line" ;;
      *"##CN-"*) printCondNamedLine  "$help_line" ;;
      *"##C"*)   printCondCommand  "$help_line" ;;
      *)
      ;;
    esac
  done

  bpTextLine "Comments"
  printInfo "#" "Normal bash comment"
  printInfo "##" "Subcommand information comment (shown with help)"
  printInfo "##C" "Conditional subcommand comment (shown with help)"
  printInfo "##-" "Separator line (shown with help)"
  printInfo "##C-" "Conditional separator line (shown with help)"
  printInfo "##N-" "Named separator line (shown with help)"
  printInfo "##CN-" "Conditional named separator line (shown with help)"
  printInfo "##D" "Internal function comment (shown ihelp)"
  bpLine
}

vhelp() { ##D Print internal variable information
  bpTextLine "Script variables"
  echo
  IFS=$'\n'
  help_lines=$( grep -v -e 'help_lines' -e 'help_line' "$0" | grep -A 1 '##V'   ) # | sed "s/--//" )
  for line in ${help_lines}; do
    if [ "$line" == "--" ]; then
      echo
    else
      help_line=$(echo "${line}" | sed -u -e "s/##V[ ]/${BP_C_COMMENT}/i" -e "s/^.*=/${BP_C_ID}&${E_END}/i" -e "s/=/${E_END}=/" )
      echo -e "$help_line"
      echo -en "$E_END"
  fi
  done
  echo
}

version() { ## Print version information
  echo "$VERSION"
}

# Runs a function in this file as a command
runCommand() {
  if [ "$bpArguments" -eq 0 ]; then

    # check for a default command
    if [ -n "$DEFAULTCMD" ]; then
      "$DEFAULTCMD" "$1" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}"
      bpExit
    fi
    bpErrorExit "No command given"
  fi

  funks=$(grep "##" "$0" | grep -v grep | grep -v help_line)
  for line in ${funks}; do
    command=$(echo "$line" | sed -s 's/(.*//')
    if [ "$command" == "$1" ]; then


      # execute pre command hook  if existing
      if [ -n "$PRECMDHOOK" ]; then
        "${PRECMDHOOK}"
      fi

      # execute command
      "${command}" "$1" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}"
      
      # execute post command hook  if existing
      if [ -n "$POSTCMDHOOK" ]; then
        "${POSTCMDHOOK}"
      fi      
      bpExit
    fi
  done
  bpErrorExit "Command \"$1\" not found"
}

# Init magic variables
#

##V Current date
DATE=$(date +"%Y-%m-%d")

##V Current time
TIME=$(date +"%H:%M:%S")

##V Number of columns in terminal
COLUMNS=$(tput cols)

##V Number of lines in terminal
LINES=$(tput lines)


trap  signalQuit SIGQUIT
trap  signalInt  SIGINT
trap  signalHup  SIGHUP
trap  signalTerm SIGTERM

##V Number of arguments given to script
bpArguments=$#

# Load configuration file settings
bpLoadSettings

# execute prescript hook if existing
if [ -n "$PREHOOK" ]; then
  ${PREHOOK} "$1" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}"
fi

# Run command parser
runCommand "$1" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}"

# Exit cleanly
bpExit

##-
