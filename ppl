#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# --------------------------------------------------------------------------
#
# Python template generator
#
# File:    ctemplate.py
# Author:  Peter Malmberg <peter.malmberg@gmail.com>
# Date:    2016-02-19
# Version: 0.3
# Python:  >=3
# License: MIT
#
# ---------------------------------------------------------------------------

# History -------------------------------------------------------------------
# - Ver 0.3
# Major rewrite for better code generation
#

# Todo ----------------------------------------------------------------------
#

# Imports -------------------------------------------------------------------

from __future__ import annotations

import argparse
import json
import os
import sys
import traceback

from bashplates import Bp
from ppytemplate import *
from project import ProjectGenerator
from query import Query

# Settings ------------------------------------------------------------------

# Absolute path to script itself
self_dir = os.path.abspath(os.path.dirname(sys.argv[0]))


class App:
    NAME = "ppltemplate"
    VERSION = "0.4"
    DESCRIPTION = "Pyplate is a simple python file generator"
    LICENSE = ""
    AUTHOR = "Peter Malmberg"
    EMAIL = "peter.malmberg@gmail.com"
    ORG = ""
    HOME = "https://github.com/zonbrisad/pyplate.git"
    ICON = f"{self_dir}/icons/mp_icon2.png"


template_dir = f"{self_dir}/pyplate"
# readme_md = f"{template_dir}/README.md"

# Code ----------------------------------------------------------------------


def create_project(template: PythonGenerator):

    if Query.read_bool("Do you want to create a project?", False):
        proj = ProjectGenerator()
        proj.project_name = template.conf.name
        proj.query()
        proj.create()
        proj.git_add(template.write(proj.project_dir))
        proj.commit()
        return True

    return False


def new(conf: TConf, pre):

    template = PythonGenerator(conf, pre)
    template.generate()

    if conf.args.dryrun is True:
        print(template)
        return

    if not create_project(template):
        template.write()


def cmd_new(args):
    conf = TConf(args)
    conf.has_main = True
    conf.has_separators = True
    conf.has_main_application = True

    new(conf, [])


def cmd_newa(args):
    conf = TConf(args)
    conf.has_main = False
    conf.has_main_application = True
    conf.has_separators = True

    new(conf, [t_preamble, t_header, t_application, t_main, t_logging, t_argtable])
    # template = PythonGenerator(conf, [t_application, t_logging], [])
    # template.generate()

    # if args.dryrun is True:
    #     print(template)
    #     return
    
    # if not create_project(template):
    #     template.write()


def cmd_newmod(args):
    conf = TConf(args)
    conf.has_main = True
    conf.has_main_application = False
    new(conf, [t_preamble, t_header, t_main_simple])
    # new(conf, [])

    
def cmd_newmin(args):
    conf = TConf(args)
    conf.has_main = True
    conf.has_main_application = False
    new(conf, [t_preamble, t_header, t_main_simple])
   

def cmd_newqt(args):
    conf = TConf(args)
    conf.has_main = False
    conf.has_main_application = True

    new(conf, [t_preamble, t_header, t_application, t_main, t_logging, t_argtable, t_qt5])


def cmd_newgtk(args):
    conf = TConf(args)
    conf.has_main = False
    conf.has_main_application = True
    conf.has_separators = True

    t_gtk.do_query = False
    new(conf, [t_preamble, t_header, t_application, t_main, t_logging, t_argtable, t_gtk])


def cmd_newp(args):
    proj = ProjectGenerator()
    proj.query()
    proj.create()
    proj.commit()


class Settings:
    SETTINGS_DIR = "~/.config/pyplate"
    SETTINGS_FILE = "pyplate.json"

    def __init__(self) -> None:
        with open("pyplate/pyplate.json") as f:
            data = json.load(f)

        print(data)

    def create(self) -> None:
        # Create personal settings
        pass


def main() -> None:

    # logging.basicConfig(level=logging.DEBUG,
    #                     format="[%(levelname)s]%(asctime)s %(message)s")

    parrent_parser = argparse.ArgumentParser(add_help=False)
    parrent_parser.add_argument("--name",
                                type=str,
                                help="Name of Python module"
                                )
    parrent_parser.add_argument("--description",
                                type=str,
                                help="Brief description"
                                )
    parrent_parser.add_argument("--author",
                                type=str,
                                help="Name of author"
                                )
    parrent_parser.add_argument("--email",
                                type=str,
                                help="Email of author"
                                )
    parrent_parser.add_argument("--project",
                                type=str,
                                help="Name of project"
                                )
    # parrent_parser.add_argument("--license",
    #                             type=str,
    #                             help="License of new file",
    #                             default=conf.license)

    parrent_parser.add_argument("--main",
                                action="store_true",
                                help="Add main function block",
                                default=False)
    parrent_parser.add_argument("--header",
                                type=argparse.FileType("r"),
                                help="Include external header"
                                )
    parrent_parser.add_argument("--dir",
                                type=str,
                                help="Project source directory",
                                default=".")
    parrent_parser.add_argument("--basedir",
                                type=str,
                                help="Project directory",
                                default=".")
    parrent_parser.add_argument("--write",
                                action="store_true",
                                help="Write file to disk",
                                default=False)
    parrent_parser.add_argument("--printheader",
                                action="store_true",
                                help="Print default header to stdout",
                                default=False)
    parrent_parser.add_argument("--separators",
                                action="store_true",
                                help="Add code separators",
                                default=False)
#    parrent_parser.add_argument("--outfile",
#                                type=argparse.FileType("w",0),
#                                help="Write template to file")
    parrent_parser.add_argument("--dryrun",
                                action="store_true",
                                help="Generate file and printing it to terminal without writing it to disk")
    parrent_parser.add_argument("--debug",
                                action="store_true",
                                help="Print debug information")
    parrent_parser.add_argument("--version",
                                action="version",
                                help="Print application version",
                                version=App.VERSION)

    # options parsing
    parser = argparse.ArgumentParser(
            prog=App.NAME,
            description=App.DESCRIPTION,
            epilog=f"Pyplate <{App.HOME}>",
            parents=[parrent_parser],
        )

    subparsers = parser.add_subparsers(title="Commands",
                                       help="",
                                       description="")                                  
    parser_new = subparsers.add_parser("new", parents=[parrent_parser],
                                       help="Create a new python file")
    parser_new.set_defaults(func=cmd_new)

    parser_new = subparsers.add_parser("newm", parents=[parrent_parser],
                                       help="Create a new python module")
    parser_new.set_defaults(func=cmd_newmod)
    parser_new = subparsers.add_parser("newmin", parents=[parrent_parser],
                                       help="Create a new minimal python file")
    parser_new.set_defaults(func=cmd_newmin)
    parser_new = subparsers.add_parser("newapp", parents=[parrent_parser],
                                       help="Create a new application")
    parser_new.set_defaults(func=cmd_newa)
    parser_new = subparsers.add_parser("newqt", parents=[parrent_parser],
                                       help="Create a new QT5 application")
    parser_new.set_defaults(func=cmd_newqt)
    parser_new = subparsers.add_parser("newgtk", parents=[parrent_parser],
                                       help="Create a new GTK3+ application")
    parser_new.set_defaults(func=cmd_newgtk)
    parser_new = subparsers.add_parser("newproj", parents=[parrent_parser],
                                       help="Create python project")
    parser_new.set_defaults(func=cmd_newp)

    args = parser.parse_args()

    if hasattr(args, "func"):
        args.func(args)
        exit(0)

    if args.printheader:
        print(t_header.header_text)
        exit(0)

    parser.print_help()


if __name__ == "__main__":
    try:
        main()
        sys.exit(0)
    except KeyboardInterrupt as e:  # Ctrl-C
        raise e
    except SystemExit as e:        # sys.exit()
        raise e
    except Exception as e:
        print('ERROR, UNEXPECTED EXCEPTION')
        print(str(e))
        traceback.print_exc()
        os._exit(1)
